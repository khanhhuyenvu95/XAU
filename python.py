import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime
import pytz

# =========================
# C·∫§U H√åNH TRANG & HEADER
# =========================
st.set_page_config(page_title="XAUUSD AI Analyst ‚Ä¢ Streamlit", layout="wide")
st.title("ü§ñ Chuy√™n gia AI ph√¢n t√≠ch XAUUSD (1h ‚Ä¢ 4h ‚Ä¢ 1D)")
st.caption(
    "AI v√†o vai chuy√™n gia ƒë·∫ßu t∆∞ V√†ng v·ªõi 30+ nƒÉm kinh nghi·ªám: ph√¢n t√≠ch RSI, MACD, MA20/50, Volume, "
    "ph√°t hi·ªán ƒë·∫£o chi·ªÅu/b·ª©t ph√°, v√† g·ª£i √Ω Buy/Sell + TP/SL. "
    "Ngu·ªìn d·ªØ li·ªáu t√†i ch√≠nh ƒë√°ng tin c·∫≠y (yfinance/Yahoo Finance) ‚Äì ph√π h·ª£p ƒë·ªÉ tham chi·∫øu v·ªõi TradingView."
)

# =========================
# TI·ªÜN √çCH T√çNH CH·ªà B√ÅO
# =========================
def ema(series: pd.Series, span: int) -> pd.Series:
    return series.ewm(span=span, adjust=False).mean()

def sma(series: pd.Series, length: int) -> pd.Series:
    return series.rolling(window=length, min_periods=length).mean()

def rsi(close: pd.Series, length: int = 14) -> pd.Series:
    delta = close.diff()
    gain = np.where(delta > 0, delta, 0.0)
    loss = np.where(delta < 0, -delta, 0.0)
    roll_up = pd.Series(gain, index=close.index).rolling(length).mean()
    roll_down = pd.Series(loss, index=close.index).rolling(length).mean()
    rs = roll_up / (roll_down.replace(0, np.nan))
    rsi_val = 100 - (100 / (1 + rs))
    return rsi_val

def macd(close: pd.Series, fast=12, slow=26, signal=9):
    macd_line = ema(close, fast) - ema(close, slow)
    signal_line = ema(macd_line, signal)
    hist = macd_line - signal_line
    return macd_line, signal_line, hist

def atr(df: pd.DataFrame, length: int = 14) -> pd.Series:
    high, low, close = df['High'], df['Low'], df['Close']
    prev_close = close.shift(1)
    tr = pd.concat([
        (high - low),
        (high - prev_close).abs(),
        (low - prev_close).abs()
    ], axis=1).max(axis=1)
    return tr.rolling(length).mean()

def resample_4h(df_1h: pd.DataFrame) -> pd.DataFrame:
    # Resample 1H -> 4H OHLCV
    rule = '4H'
    agg = {
        'Open': 'first',
        'High': 'max',
        'Low': 'min',
        'Close': 'last',
        'Volume': 'sum'
    }
    return df_1h.resample(rule).apply(agg).dropna()

def latest_price_row(df: pd.DataFrame):
    if df is None or df.empty:
        return None
    return df.iloc[-1]

# =========================
# T·∫¢I D·ªÆ LI·ªÜU (CACHE)
# =========================
@st.cache_data(show_spinner=False)
def fetch_yf(symbol: str, period: str, interval: str) -> pd.DataFrame:
    return yf.download(symbol, period=period, interval=interval, auto_adjust=False, progress=False)

@st.cache_data(show_spinner=False)
def fetch_price_and_frames(symbol_spot: str = "XAUUSD=X"):
    """
    Tr·∫£ v·ªÅ:
      - df_1h (period 90d)
      - df_4h (resample t·ª´ 1h)
      - df_1d (period 2y)
      - df_fut (GC=F) d√πng khi Volume spot b·ªã thi·∫øu
    """
    df_1h = fetch_yf(symbol_spot, period="90d", interval="1h")
    df_1d = fetch_yf(symbol_spot, period="2y", interval="1d")

    # 4H t·ª´ 1H
    df_4h = resample_4h(df_1h.copy()) if not df_1h.empty else pd.DataFrame()

    # L·∫•y volume proxy t·ª´ gold futures (GC=F) n·∫øu volume XAUUSD thi·∫øu
    df_fut_1h = fetch_yf("GC=F", period="90d", interval="1h")
    df_fut_4h = resample_4h(df_fut_1h.copy()) if not df_fut_1h.empty else pd.DataFrame()
    df_fut_1d = fetch_yf("GC=F", period="2y", interval="1d")

    return df_1h, df_4h, df_1d, df_fut_1h, df_fut_4h, df_fut_1d

# =========================
# PH√ÇN T√çCH THEO KHUNG
# =========================
def evaluate_frame(df: pd.DataFrame, df_vol_proxy: pd.DataFrame, name: str):
    """
    T√≠nh RSI(14), MACD(12,26,9), MA20/50, ATR(14), ph√°t hi·ªán:
     - MACD c·∫Øt l√™n (v√† d∆∞·ªõi tr·ª•c 0 ‚Üí m·∫°nh h∆°n)
     - RSI ph√¢n k·ª≥ tƒÉng (heuristic ƒë∆°n gi·∫£n)
     - B·ª©t ph√° MA20/50 (Close > c·∫£ MA20 & MA50)
     - Volume spike & x√°c nh·∫≠n
    Tr·∫£ v·ªÅ dict k·∫øt qu·∫£ + khuy·∫øn ngh·ªã khung ƒë√≥.
    """
    result = {
        "frame": name,
        "close": None,
        "rsi": None,
        "macd_cross_up": False,
        "macd_below_zero_then_up": False,
        "ma20": None,
        "ma50": None,
        "price_above_ma2050": False,
        "bullish_div_rsi": False,
        "volume_spike": False,
        "trend_note": "",    # 'ƒë·∫£o chi·ªÅu' / 'b·ª©t ph√°' / 'trung t√≠nh'
        "suggest": "",       # BUY / SELL / HOLD
        "tp": None,
        "sl": None
    }

    if df is None or df.empty:
        result["trend_note"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
        result["suggest"] = "HOLD"
        return result

    df = df.copy()
    # B√π volume n·∫øu thi·∫øu
    if 'Volume' in df.columns and df['Volume'].dropna().sum() == 0 and df_vol_proxy is not None and not df_vol_proxy.empty:
        # canh theo index g·∫ßn nh·∫•t
        vol_proxy = df_vol_proxy['Volume'].reindex(df.index, method='nearest')
        df['Volume'] = vol_proxy

    # T√≠nh ch·ªâ b√°o
    df['RSI14'] = rsi(df['Close'])
    macd_line, signal_line, hist = macd(df['Close'])
    df['MACD'] = macd_line
    df['SIGNAL'] = signal_line
    df['HIST'] = hist
    df['MA20'] = sma(df['Close'], 20)
    df['MA50'] = sma(df['Close'], 50)
    df['ATR14'] = atr(df, 14)

    last = df.iloc[-1]
    result["close"] = float(last['Close'])
    result["rsi"] = float(last['RSI14']) if pd.notna(last['RSI14']) else None
    result["ma20"] = float(last['MA20']) if pd.notna(last['MA20']) else None
    result["ma50"] = float(last['MA50']) if pd.notna(last['MA50']) else None
    result["price_above_ma2050"] = (
        pd.notna(last['MA20']) and pd.notna(last['MA50']) and
        last['Close'] > last['MA20'] and last['Close'] > last['MA50']
    )

    # MACD c·∫Øt l√™n
    if len(df) >= 2:
        prev = df.iloc[-2]
        cross_up = (prev['MACD'] <= prev['SIGNAL']) and (last['MACD'] > last['SIGNAL'])
        result["macd_cross_up"] = bool(cross_up)
        result["macd_below_zero_then_up"] = bool(cross_up and (prev['MACD'] < 0 and prev['SIGNAL'] < 0))

    # RSI ph√¢n k·ª≥ tƒÉng (heuristic: LL price & HL RSI trong ~40 n·∫øn g·∫ßn nh·∫•t)
    lookback = min(40, len(df) - 1)
    if lookback > 10:
        window = df.iloc[-lookback:]
        # t√¨m hai ƒë√°y c·ª•c b·ªô
        price = window['Close']
        rsi_ser = window['RSI14']
        # ƒë√°y 1: min ƒë·∫ßu n·ª≠a ƒë·∫ßu; ƒë√°y 2: min n·ª≠a sau
        left = window.iloc[:lookback//2]
        right = window.iloc[lookback//2:]
        if not left.empty and not right.empty:
            p1_idx = left['Close'].idxmin()
            p2_idx = right['Close'].idxmin()
            if p1_idx in rsi_ser.index and p2_idx in rsi_ser.index:
                p1, p2 = price.loc[p1_idx], price.loc[p2_idx]
                r1, r2 = rsi_ser.loc[p1_idx], rsi_ser.loc[p2_idx]
                if pd.notna(r1) and pd.notna(r2):
                    # Bullish divergence: price makes lower low, RSI makes higher low
                    result["bullish_div_rsi"] = bool((p2 < p1) and (r2 > r1))

    # Volume spike: volume > 1.5 * SMA20(volume) v√† n·∫øn tƒÉng
    if 'Volume' in df.columns and df['Volume'].notna().any():
        vol_sma20 = df['Volume'].rolling(20).mean()
        if pd.notna(vol_sma20.iloc[-1]):
            result["volume_spike"] = bool((df['Volume'].iloc[-1] > 1.5 * vol_sma20.iloc[-1]) and
                                          (df['Close'].iloc[-1] > df['Open'].iloc[-1]))

    # Ph√¢n lo·∫°i xu h∆∞·ªõng: ƒë·∫£o chi·ªÅu hay b·ª©t ph√°
    if result["macd_cross_up"] and result["macd_below_zero_then_up"]:
        result["trend_note"] = "ƒê·∫£o chi·ªÅu tƒÉng (MACD c·∫Øt l√™n d∆∞·ªõi tr·ª•c 0)"
    elif result["price_above_ma2050"] and result["volume_spike"]:
        result["trend_note"] = "B·ª©t ph√° (v∆∞·ª£t MA20/50 k√®m Volume)"
    elif result["price_above_ma2050"]:
        result["trend_note"] = "Xu h∆∞·ªõng tƒÉng (tr√™n MA20/50)"
    else:
        result["trend_note"] = "Trung t√≠nh / y·∫øu"

    # T√≠n hi·ªáu t·ªïng h·ª£p BUY/SELL (theo y√™u c·∫ßu)
    bullish_combo = (
        bool(result["bullish_div_rsi"]) and
        bool(result["macd_cross_up"]) and
        bool(result["price_above_ma2050"]) and
        bool(result["volume_spike"])
    )
    bearish_combo = (
        (result["rsi"] is not None and result["rsi"] > 70) and
        (not result["price_above_ma2050"]) and
        (not result["macd_cross_up"])
    )

    atr_val = float(last['ATR14']) if pd.notna(last['ATR14']) else None
    if bullish_combo:
        result["suggest"] = "BUY"
        if atr_val:
            entry = float(last['Close'])
            result["tp"] = round(entry + 1.5 * atr_val, 2)
            result["sl"] = round(entry - 1.0 * atr_val, 2)
    elif bearish_combo:
        result["suggest"] = "SELL"
        if atr_val:
            entry = float(last['Close'])
            result["tp"] = round(entry - 1.5 * atr_val, 2)
            result["sl"] = round(entry + 1.0 * atr_val, 2)
    else:
        result["suggest"] = "HOLD"

    return result

def build_indicator_table(res):
    """
    Tr·∫£ v·ªÅ DataFrame g·ªìm:
    STT | Ch·ªâ ti√™u | Gi√° tr·ªã | ƒê√°p ·ª©ng t√≠n hi·ªáu tƒÉng? | Khuy·∫øn ngh·ªã
    """
    rows = []
    stt = 1

    # 1. Xu h∆∞·ªõng (ƒë·∫£o chi·ªÅu / b·ª©t ph√° / ‚Ä¶)
    rows.append([
        stt, "Xu h∆∞·ªõng (Trend)", res["trend_note"], 
        "C√≥" if (("b·ª©t ph√°" in res["trend_note"].lower()) or ("ƒë·∫£o chi·ªÅu" in res["trend_note"].lower()) or ("tƒÉng" in res["trend_note"].lower() and "trung" not in res["trend_note"].lower())) else "Kh√¥ng",
        res["suggest"]
    ])
    stt += 1

    # 2. RSI
    rsi_val = "-" if res["rsi"] is None else f"{res['rsi']:.2f}"
    rsi_flag = "C√≥" if (res["rsi"] is not None and (res["rsi"] < 30 or res["bullish_div_rsi"] or res["rsi"] >= 50)) else "Kh√¥ng"
    rows.append([
        stt, "RSI(14)", rsi_val + (" ‚Ä¢ Ph√¢n k·ª≥ tƒÉng" if res["bullish_div_rsi"] else ""),
        rsi_flag, res["suggest"]
    ])
    stt += 1

    # 3. MACD
    macd_note = "MACD c·∫Øt l√™n" if res["macd_cross_up"] else "Ch∆∞a c·∫Øt l√™n"
    if res["macd_below_zero_then_up"]:
        macd_note += " (d∆∞·ªõi 0 ‚áí t√≠n hi·ªáu m·∫°nh)"
    rows.append([
        stt, "MACD(12,26,9)", macd_note,
        "C√≥" if res["macd_cross_up"] else "Kh√¥ng",
        res["suggest"]
    ])
    stt += 1

    # 4. MA20/50
    ma_val = f"MA20: {res['ma20']:.2f} ‚Ä¢ MA50: {res['ma50']:.2f}" if (res["ma20"] and res["ma50"]) else "-"
    rows.append([
        stt, "Gi√° v∆∞·ª£t MA20/50", ma_val,
        "C√≥" if res["price_above_ma2050"] else "Kh√¥ng",
        res["suggest"]
    ])
    stt += 1

    # 5. Volume
    rows.append([
        stt, "Volume x√°c nh·∫≠n", "Spike & n·∫øn tƒÉng" if res["volume_spike"] else "B√¨nh th∆∞·ªùng / thi·∫øu d·ªØ li·ªáu",
        "C√≥" if res["volume_spike"] else "Kh√¥ng",
        res["suggest"]
    ])

    df = pd.DataFrame(rows, columns=["STT", "Ch·ªâ ti√™u", "Gi√° tr·ªã (th·ª±c th·ªùi)", "ƒê√°p ·ª©ng t√≠n hi·ªáu tƒÉng?", "Khuy·∫øn ngh·ªã"])
    return df

def overall_recommendation(r1h, r4h, r1d):
    # ∆Øu ti√™n 1D > 4H > 1H
    for r in [r1d, r4h, r1h]:
        if r and r["suggest"] in ("BUY", "SELL"):
            return r["suggest"], r["tp"], r["sl"], r["frame"]
    # n·∫øu kh√¥ng r√µ r√†ng
    return "HOLD", None, None, None

# =========================
# SIDEBAR & NH·∫¨P LI·ªÜU
# =========================
with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    symbol = st.text_input(
        "M√£ giao d·ªãch:",
        value="XAUUSD=X",
        help="M·∫∑c ƒë·ªãnh: Spot Gold tr√™n Yahoo Finance. B·∫°n c√≥ th·ªÉ nh·∫≠p GC=F (Gold Futures) ho·∫∑c m√£ kh√°c t∆∞∆°ng th√≠ch Yahoo Finance."
    )
    st.caption("G·ª£i √Ω: XAUUSD=X (Spot), GC=F (Futures). 4H ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ 1H.")

# =========================
# H√ÄNG GI√Å ‚ÄúTH·ª∞C TH·ªúI‚Äù
# =========================
tz = pytz.timezone("Asia/Bangkok")
st.subheader("üéØ Gi√° th·ªùi gian th·ª±c")
colp, colt = st.columns([1, 2])

# t·∫£i 1m/5m ƒë·ªÉ snapshot? Yahoo gi·ªõi h·∫°n. L·∫•y 1h m·ªõi nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã ·ªïn ƒë·ªãnh
df_last_1h = fetch_yf(symbol, period="5d", interval="1h")
if not df_last_1h.empty:
    last_row = df_last_1h.iloc[-1]
    prev_row = df_last_1h.iloc[-2] if len(df_last_1h) >= 2 else None
    last_price = float(last_row['Close'])
    delta = (last_price - float(prev_row['Close'])) if prev_row is not None else 0.0
    colp.metric(label=f"{symbol} (khung 1h g·∫ßn nh·∫•t)", value=f"{last_price:.2f}", delta=f"{delta:+.2f}")
    colt.write(f"C·∫≠p nh·∫≠t: {last_row.name.tz_localize('UTC').tz_convert(tz).strftime('%Y-%m-%d %H:%M:%S %Z')}")
else:
    colp.metric(label=f"{symbol}", value="N/A")
    colt.write("Ch∆∞a l·∫•y ƒë∆∞·ª£c gi√° g·∫ßn nh·∫•t.")

st.divider()

# =========================
# N√öT "T√åM KI·∫æM" & PH√ÇN T√çCH
# =========================
if st.button("üîé T√¨m ki·∫øm & Ph√¢n t√≠ch"):
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu & ph√¢n t√≠ch ch·ªâ b√°o..."):
        df_1h, df_4h, df_1d, fut_1h, fut_4h, fut_1d = fetch_price_and_frames(symbol)

        r1h = evaluate_frame(df_1h, fut_1h, "1H")
        r4h = evaluate_frame(df_4h, fut_4h, "4H")
        r1d = evaluate_frame(df_1d, fut_1d, "1D")

        # Hi·ªÉn th·ªã t·ª´ng khung v·ªõi b·∫£ng ti√™u chu·∫©n
        for res in [r1h, r4h, r1d]:
            st.markdown(f"### ‚è± Khung {res['frame']}")
            top_cols = st.columns(4)
            top_cols[0].write(f"**Close:** {res['close']:.2f}" if res["close"] else "**Close:** -")
            top_cols[1].write(f"**RSI14:** {res['rsi']:.2f}" if res["rsi"] else "**RSI14:** -")
            top_cols[2].write(f"**MA20/50:** {res['ma20']:.2f} / {res['ma50']:.2f}" if (res["ma20"] and res["ma50"]) else "**MA20/50:** -")
            top_cols[3].write(f"**Xu h∆∞·ªõng:** {res['trend_note']}")

            table = build_indicator_table(res)
            st.dataframe(table, use_container_width=True)

        st.divider()

        # KHUY·∫æN NGH·ªä T·ªîNG H·ª¢P
        final_sig, tp, sl, base_tf = overall_recommendation(r1h, r4h, r1d)
        st.markdown("## üß≠ Khuy·∫øn ngh·ªã t·ªïng h·ª£p")
        colA, colB, colC, colD = st.columns(4)
        colA.metric("T√≠n hi·ªáu", final_sig)
        colB.metric("Khung tham chi·∫øu", base_tf if base_tf else "-")
        colC.metric("Take Profit", f"{tp:.2f}" if tp else "-")
        colD.metric("Cut Loss", f"{sl:.2f}" if sl else "-")

        st.info(
            "Nguy√™n t·∫Øc k·∫øt lu·∫≠n: **RSI ph√¢n k·ª≥ tƒÉng + MACD c·∫Øt l√™n + Gi√° v∆∞·ª£t MA20/50 + Volume tƒÉng** ‚áí ∆∞u ti√™n BUY. "
            "Ng∆∞·ª£c l·∫°i n·∫øu RSI qu√° mua, d∆∞·ªõi MA v√† MACD ch∆∞a x√°c nh·∫≠n ‚áí c√¢n nh·∫Øc SELL. "
            "TP/SL g·ª£i √Ω d·ª±a tr√™n **ATR(14)** (1.5√óATR cho TP, 1.0√óATR cho SL)."
        )

st.caption(
    "‚ö†Ô∏è Mi·ªÖn tr·ª´ tr√°ch nhi·ªám: Th√¥ng tin ch·ªâ nh·∫±m m·ª•c ƒë√≠ch tham kh·∫£o v√† kh√¥ng ph·∫£i khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞. "
    "Lu√¥n qu·∫£n tr·ªã r·ªßi ro v√† t·ª± ch·ªãu tr√°ch nhi·ªám v·ªõi quy·∫øt ƒë·ªãnh c·ªßa b·∫°n."
)
